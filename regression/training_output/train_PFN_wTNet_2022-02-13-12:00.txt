2022-02-13 13:32:15.130283: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:39] Overriding allow_growth setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.
2022-02-13 13:32:15.130360: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 9672 MB memory:  -> device: 0, name: NVIDIA GeForce RTX 2080 Ti, pci bus id: 0000:b2:00.0, compute capability: 7.5
2022-02-13 13:32:24.151667: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)

Training with values: 
Batch size: 1000
Learning rate: 0.001
Epochs: 800
Model: PFN_wTNet
Training on GPU: 7
Training on 200000 events

Loading data..
time to load data: 0.0039 (s)

X size: (200000, 1086, 5)

train -- val -- test
140000 -- 30000 -- 30000

time to split:   0.00 (m)

Loading models..
Model: "PFN_wTNet"
__________________________________________________________________________________________________
Layer (type)                    Output Shape         Param #     Connected to                     
==================================================================================================
input (InputLayer)              [(None, 1086, 5)]    0                                            
__________________________________________________________________________________________________
t_dist_0 (TimeDistributed)      (None, 1086, 50)     300         input[0][0]                      
__________________________________________________________________________________________________
activation_0 (Activation)       (None, 1086, 50)     0           t_dist_0[0][0]                   
__________________________________________________________________________________________________
t_dist_1 (TimeDistributed)      (None, 1086, 100)    5100        activation_0[0][0]               
__________________________________________________________________________________________________
activation_1 (Activation)       (None, 1086, 100)    0           t_dist_1[0][0]                   
__________________________________________________________________________________________________
t_dist_2 (TimeDistributed)      (None, 1086, 100)    10100       activation_1[0][0]               
__________________________________________________________________________________________________
activation_2 (Activation)       (None, 1086, 100)    0           t_dist_2[0][0]                   
__________________________________________________________________________________________________
tnet_0_MaxPool (MaxPooling1D)   (None, 1, 100)       0           activation_2[0][0]               
__________________________________________________________________________________________________
tnet_0_dense_0 (Dense)          (None, 1, 100)       10100       tnet_0_MaxPool[0][0]             
__________________________________________________________________________________________________
tnet_0_dense_1 (Dense)          (None, 1, 50)        5050        tnet_0_dense_0[0][0]             
__________________________________________________________________________________________________
pre_matrix_0 (Dense)            (None, 1, 25)        1275        tnet_0_dense_1[0][0]             
__________________________________________________________________________________________________
matrix_0 (Reshape)              (None, 5, 5)         0           pre_matrix_0[0][0]               
__________________________________________________________________________________________________
matrix_multiply_0 (Dot)         (None, 1086, 5)      0           input[0][0]                      
                                                                 matrix_0[0][0]                   
__________________________________________________________________________________________________
t_dist_3 (TimeDistributed)      (None, 1086, 100)    600         matrix_multiply_0[0][0]          
__________________________________________________________________________________________________
activation_3 (Activation)       (None, 1086, 100)    0           t_dist_3[0][0]                   
__________________________________________________________________________________________________
t_dist_4 (TimeDistributed)      (None, 1086, 100)    10100       activation_3[0][0]               
__________________________________________________________________________________________________
activation_4 (Activation)       (None, 1086, 100)    0           t_dist_4[0][0]                   
__________________________________________________________________________________________________
t_dist_5 (TimeDistributed)      (None, 1086, 128)    12928       activation_4[0][0]               
__________________________________________________________________________________________________
mask (Lambda)                   (None, 1086)         0           input[0][0]                      
__________________________________________________________________________________________________
activation_5 (Activation)       (None, 1086, 128)    0           t_dist_5[0][0]                   
__________________________________________________________________________________________________
sum (Dot)                       (None, 128)          0           mask[0][0]                       
                                                                 activation_5[0][0]               
__________________________________________________________________________________________________
dense_6 (Dense)                 (None, 100)          12900       sum[0][0]                        
__________________________________________________________________________________________________
activation_6 (Activation)       (None, 100)          0           dense_6[0][0]                    
__________________________________________________________________________________________________
dense_7 (Dense)                 (None, 100)          10100       activation_6[0][0]               
__________________________________________________________________________________________________
activation_7 (Activation)       (None, 100)          0           dense_7[0][0]                    
__________________________________________________________________________________________________
dense_8 (Dense)                 (None, 100)          10100       activation_7[0][0]               
__________________________________________________________________________________________________
activation_8 (Activation)       (None, 100)          0           dense_8[0][0]                    
__________________________________________________________________________________________________
output (Dense)                  (None, 1)            101         activation_8[0][0]               
__________________________________________________________________________________________________
activation_9 (Activation)       (None, 1)            0           output[0][0]                     
==================================================================================================
Total params: 88,754
Trainable params: 88,754
Non-trainable params: 0
__________________________________________________________________________________________________

Training model..

Epoch 1/800
Traceback (most recent call last):
  File "train_pflow.py", line 177, in <module>
    history = model.fit(X_train,
  File "/usr/local/lib/python3.8/dist-packages/keras/engine/training.py", line 1184, in fit
    tmp_logs = self.train_function(iterator)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py", line 885, in __call__
    result = self._call(*args, **kwds)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py", line 933, in _call
    self._initialize(args, kwds, add_initializers_to=initializers)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py", line 759, in _initialize
    self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py", line 3066, in _get_concrete_function_internal_garbage_collected
    graph_function, _ = self._maybe_define_function(args, kwargs)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py", line 3463, in _maybe_define_function
    graph_function = self._create_graph_function(args, kwargs)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py", line 3298, in _create_graph_function
    func_graph_module.func_graph_from_py_func(
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/func_graph.py", line 1007, in func_graph_from_py_func
    func_outputs = python_func(*func_args, **func_kwargs)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py", line 668, in wrapped_fn
    out = weak_wrapped_fn().__wrapped__(*args, **kwds)
  File "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/func_graph.py", line 994, in wrapper
    raise e.ag_error_metadata.to_exception(e)
TypeError: in user code:

    /usr/local/lib/python3.8/dist-packages/keras/engine/training.py:853 train_function  *
        return step_function(self, iterator)
    /usr/local/lib/python3.8/dist-packages/keras/engine/training.py:842 step_function  **
        outputs = model.distribute_strategy.run(run_step, args=(data,))
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py:1286 run
        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py:2849 call_for_each_replica
        return self._call_for_each_replica(fn, args, kwargs)
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/distribute/distribute_lib.py:3632 _call_for_each_replica
        return fn(*args, **kwargs)
    /usr/local/lib/python3.8/dist-packages/keras/engine/training.py:835 run_step  **
        outputs = model.train_step(data)
    /usr/local/lib/python3.8/dist-packages/keras/engine/training.py:788 train_step
        loss = self.compiled_loss(
    /usr/local/lib/python3.8/dist-packages/keras/engine/compile_utils.py:239 __call__
        self._loss_metric.update_state(
    /usr/local/lib/python3.8/dist-packages/keras/utils/metrics_utils.py:73 decorated
        update_op = update_state_fn(*args, **kwargs)
    /usr/local/lib/python3.8/dist-packages/keras/metrics.py:177 update_state_fn
        return ag_update_state(*args, **kwargs)
    /usr/local/lib/python3.8/dist-packages/keras/metrics.py:409 update_state  **
        sample_weight = tf.__internal__.ops.broadcast_weights(
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/weights_broadcast_ops.py:157 broadcast_weights
        values = ops.convert_to_tensor(values, name="values")
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:163 wrapped
        return func(*args, **kwargs)
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1566 convert_to_tensor
        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:346 _constant_tensor_conversion_function
        return constant(v, dtype=dtype, name=name)
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:271 constant
        return _constant_impl(value, dtype, shape, name, verify_shape=False,
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:288 _constant_impl
        tensor_util.make_tensor_proto(
    /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_util.py:435 make_tensor_proto
        values = np.asarray(values)
    /usr/local/lib/python3.8/dist-packages/keras/engine/keras_tensor.py:244 __array__
        raise TypeError(

    TypeError: Cannot convert a symbolic Keras input/output to a numpy array. This error may indicate that you're trying to pass a symbolic value to a NumPy call, which is not supported. Or, you may be trying to pass Keras symbolic inputs/outputs to a TF API that does not register dispatching, preventing Keras from automatically converting the API call to a lambda layer in the Functional Model.

